diff -up gexiv2-0.14.1/gexiv2/gexiv2-metadata.cpp.omv~ gexiv2-0.14.1/gexiv2/gexiv2-metadata.cpp
--- gexiv2-0.14.1/gexiv2/gexiv2-metadata.cpp.omv~	2023-05-18 03:51:39.517469592 +0200
+++ gexiv2-0.14.1/gexiv2/gexiv2-metadata.cpp	2023-05-18 04:02:49.294048322 +0200
@@ -45,13 +45,7 @@ public:
         , _error{nullptr}
         , _eof{false}
         {}
-#if EXIV2_TEST_VERSION(0,27,99)
-    using size_type = long;
-#else
-    using size_type = long;
-#endif
-
-    size_type _size;
+    size_t _size;
 
     ~GioIo() { g_clear_object (&_is); g_clear_error (&_error); _seekable = NULL;}
 #if defined(_MSC_VER)
@@ -84,22 +78,22 @@ public:
     int close() override { return 0; }
 
     // Writing is not supported
-    size_type write(const Exiv2::byte* /*data*/, size_type /*wcount*/) override { return 0; }
-    size_type write(BasicIo& /*src*/) override { return 0; }
+    size_t write(const Exiv2::byte* /*data*/, size_t /*wcount*/) override { return 0; }
+    size_t write(BasicIo& /*src*/) override { return 0; }
     int putb(Exiv2::byte /*data*/) override { return EOF; }
 
-    Exiv2::DataBuf read(size_type rcount) override {
+    Exiv2::DataBuf read(size_t rcount) override {
         Exiv2::DataBuf b{rcount};
 
-        auto bytes_read = this->read(b.pData_, rcount);
+        auto bytes_read = this->read(b.data(), rcount);
         if (bytes_read > 0 && bytes_read != rcount) {
-            b.reset({b.pData_, bytes_read});
+            b=Exiv2::DataBuf(b.c_data(), bytes_read);
         }
 
         return b;
     }
 
-    size_type read(Exiv2::byte* buf, size_type rcount) override {
+    size_t read(Exiv2::byte* buf, size_t rcount) override {
         GError *error = NULL;
         gssize result = 0;
 
@@ -188,7 +182,7 @@ public:
 
     int munmap() override { return 0; }
 
-    long tell() const override {
+    size_t tell() const override {
         if (_seekable != nullptr && g_seekable_can_seek (_seekable)) {
             return static_cast<long>(g_seekable_tell (_seekable));
         } else {
@@ -204,7 +198,9 @@ public:
 
     bool eof() const override { return _eof; }
 
-    std::string path() const override { return "GIO Wrapper"; }
+    const std::string &path() const noexcept override { return "GIO Wrapper"; }
+
+    void populateFakeData() override {}
 
 #ifdef EXV_UNICODE_PATH
     std::wstring wpath() const override {
@@ -395,7 +391,7 @@ static void gexiv2_metadata_init_interna
         if (priv->preview_manager)
             delete priv->preview_manager;
 
-        g_set_error_literal(error, g_quark_from_string("GExiv2"), e.code(), e.what());
+        g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
     }
 }
 
@@ -416,7 +412,7 @@ static gboolean gexiv2_metadata_open_int
 
         return !(error && *error);
     } catch (Exiv2::Error& e) {
-        g_set_error_literal(error, g_quark_from_string("GExiv2"), e.code(), e.what());
+        g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
     }
 
     return FALSE;
@@ -476,11 +472,11 @@ gboolean gexiv2_metadata_open_path(GExiv
 
         return gexiv2_metadata_open_internal (self, error);
     } catch (Exiv2::Error &e) {
-        g_set_error_literal (error, g_quark_from_string ("GExiv2"), e.code (), e.what ());
+        g_set_error_literal (error, g_quark_from_string ("GExiv2"), static_cast<int>(e.code ()), e.what ());
     }
 #ifdef EXV_UNICODE_PATH
     catch (Exiv2::WError &e) {
-        g_set_error_literal (error, g_quark_from_string ("GExiv2"), e.code (), e.what ());
+        g_set_error_literal (error, g_quark_from_string ("GExiv2"), static_cast<int>(e.code ()), e.what ());
     }
 #endif
 
@@ -514,7 +510,7 @@ gboolean gexiv2_metadata_open_stream (GE
         
         return gexiv2_metadata_open_internal (self, error);
     } catch (Exiv2::Error &e) {
-        g_set_error_literal (error, g_quark_from_string ("GExiv2"), e.code (), e.what ());
+        g_set_error_literal (error, g_quark_from_string ("GExiv2"), static_cast<int>(e.code ()), e.what ());
     }
     
     return FALSE;
@@ -533,7 +529,7 @@ gboolean gexiv2_metadata_from_stream(GEx
 
         return gexiv2_metadata_open_internal (self, error);
     } catch (Exiv2::Error &e) {
-        g_set_error_literal (error, g_quark_from_string ("GExiv2"), e.code(), e.what());
+        g_set_error_literal (error, g_quark_from_string ("GExiv2"), static_cast<int>(e.code()), e.what());
     }
 
     return FALSE;
@@ -584,7 +580,7 @@ gboolean gexiv2_metadata_from_app1_segme
         return TRUE;
     } catch (Exiv2::Error &e) {
         delete self->priv->image.release();
-        g_set_error_literal(error, g_quark_from_string("GExiv2"), e.code(), e.what());
+        g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
     }
     return FALSE;
 }
@@ -653,7 +649,7 @@ static gboolean gexiv2_metadata_save_int
 
         return TRUE;
     } catch (Exiv2::Error& e) {
-        g_set_error_literal(error, g_quark_from_string("GExiv2"), e.code(), e.what());
+        g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
     }
     return FALSE;
 }
@@ -675,11 +671,11 @@ gboolean gexiv2_metadata_save_external (
                                              Exiv2::ImageFactory::create(Exiv2::ImageType::xmp, local_path),
                                              error);
     } catch (Exiv2::Error &e) {
-        g_set_error_literal (error, g_quark_from_string ("GExiv2"), e.code (), e.what ());
+        g_set_error_literal (error, g_quark_from_string ("GExiv2"), static_cast<int>(e.code ()), e.what ());
     }
 #ifdef EXV_UNICODE_PATH
     catch (Exiv2::WError &e) {
-        g_set_error_literal (error, g_quark_from_string ("GExiv2"), e.code (), e.what ());
+        g_set_error_literal (error, g_quark_from_string ("GExiv2"), static_cast<int>(e.code ()), e.what ());
     }
 #endif
 
@@ -701,11 +697,11 @@ gboolean gexiv2_metadata_save_file (GExi
 
         return gexiv2_metadata_save_internal(self, Exiv2::ImageFactory::open(local_path), error);
     } catch (Exiv2::Error &e) {
-        g_set_error_literal (error, g_quark_from_string ("GExiv2"), e.code (), e.what ());
+        g_set_error_literal (error, g_quark_from_string ("GExiv2"), static_cast<int>(e.code ()), e.what ());
     }
 #ifdef EXV_UNICODE_PATH
     catch (Exiv2::WError &e) {
-        g_set_error_literal (error, g_quark_from_string ("GExiv2"), e.code (), e.what ());
+        g_set_error_literal (error, g_quark_from_string ("GExiv2"), static_cast<int>(e.code ()), e.what ());
     }
 #endif
     
@@ -724,7 +720,7 @@ gboolean gexiv2_metadata_save_stream (GE
         return gexiv2_metadata_save_internal (self, Exiv2::ImageFactory::open (stream_ptr), error);
 #endif
     } catch (Exiv2::Error &e) {
-        g_set_error_literal (error, g_quark_from_string ("GExiv2"), e.code (), e.what ());
+        g_set_error_literal (error, g_quark_from_string ("GExiv2"), static_cast<int>(e.code ()), e.what ());
     }
     
     return FALSE;
@@ -761,7 +757,7 @@ gboolean gexiv2_metadata_try_has_tag(GEx
 
     // Invalid "familyName"
     Exiv2::Error e(Exiv2::ErrorCode::kerInvalidKey, tag);
-    g_set_error_literal(error, g_quark_from_string("GExiv2"), e.code(), e.what());
+    g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
 
     return FALSE;
 }
@@ -797,7 +793,7 @@ gboolean gexiv2_metadata_try_clear_tag(G
 
     // Invalid "familyName"
     Exiv2::Error e(Exiv2::ErrorCode::kerInvalidKey, tag);
-    g_set_error_literal(error, g_quark_from_string("GExiv2"), e.code(), e.what());
+    g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
 
     return FALSE;
 }
@@ -954,7 +950,7 @@ void gexiv2_metadata_try_set_orientation
         gexiv2_metadata_clear_exif_tag(self, "Exif.MinoltaCs7D.Rotation");
         gexiv2_metadata_clear_exif_tag(self, "Exif.MinoltaCs5D.Rotation");
     } catch (Exiv2::Error& e) {
-        g_set_error_literal(error, g_quark_from_string("GExiv2"), e.code(), e.what());
+        g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
     }
 }
 
@@ -1075,7 +1071,7 @@ void gexiv2_metadata_try_set_metadata_pi
         xmp_data["Xmp.tiff.ImageWidth"] = static_cast<uint32_t>(width);
         xmp_data["Xmp.exif.PixelXDimension"] = static_cast<uint32_t>(width);
     } catch (Exiv2::Error& e) {
-        g_set_error_literal(error, g_quark_from_string("GExiv2"), e.code(), e.what());
+        g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
     }
 }
 
@@ -1104,7 +1100,7 @@ void gexiv2_metadata_try_set_metadata_pi
         xmp_data["Xmp.tiff.ImageLength"] = static_cast<uint32_t>(height);
         xmp_data["Xmp.exif.PixelYDimension"] = static_cast<uint32_t>(height);
     } catch (Exiv2::Error& e) {
-        g_set_error_literal(error, g_quark_from_string("GExiv2"), e.code(), e.what());
+        g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
     }
 }
 
@@ -1226,7 +1222,7 @@ void gexiv2_metadata_try_set_comment(GEx
         /* Do not need to write to acdsee properties, just read from them */
         // xmp_data ["Xmp.acdsee.notes"] = comment;
     } catch (Exiv2::Error& e) {
-        g_set_error_literal(error, g_quark_from_string("GExiv2"), e.code(), e.what());
+        g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
     }
 }
 
@@ -1273,7 +1269,7 @@ gchar* gexiv2_metadata_try_get_tag_strin
 
     // Invalid "familyName"
     Exiv2::Error e(Exiv2::ErrorCode::kerInvalidKey, tag);
-    g_set_error_literal(error, g_quark_from_string("GExiv2"), e.code(), e.what());
+    g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
 
     return nullptr;
 }
@@ -1295,7 +1291,7 @@ gboolean gexiv2_metadata_try_set_tag_str
 
     // Invalid "familyName"
     Exiv2::Error e(Exiv2::ErrorCode::kerInvalidKey, tag);
-    g_set_error_literal(error, g_quark_from_string("GExiv2"), e.code(), e.what());
+    g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
 
     return FALSE;
 }
@@ -1353,7 +1349,7 @@ gchar* gexiv2_metadata_try_get_tag_inter
 
     // Invalid "familyName"
     Exiv2::Error e(Exiv2::ErrorCode::kerInvalidKey, tag);
-    g_set_error_literal(error, g_quark_from_string("GExiv2"), e.code(), e.what());
+    g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
 
     return nullptr;
 }
@@ -1393,7 +1389,7 @@ gchar** gexiv2_metadata_try_get_tag_mult
 
     // Invalid "familyName"
     Exiv2::Error e(Exiv2::ErrorCode::kerInvalidKey, tag);
-    g_set_error_literal(error, g_quark_from_string("GExiv2"), e.code(), e.what());
+    g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
 
     return nullptr;
 }
@@ -1416,7 +1412,7 @@ gboolean gexiv2_metadata_try_set_tag_mul
 
     // Invalid "familyName"
     Exiv2::Error e(Exiv2::ErrorCode::kerInvalidKey, tag);
-    g_set_error_literal(error, g_quark_from_string("GExiv2"), e.code(), e.what());
+    g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
 
     return FALSE;
 }
@@ -1459,7 +1455,7 @@ gchar** gexiv2_metadata_get_tag_multiple
 
     // Invalid "familyName"
     Exiv2::Error e(Exiv2::ErrorCode::kerInvalidKey, tag);
-    g_set_error_literal(&error, g_quark_from_string("GExiv2"), e.code(), e.what());
+    g_set_error_literal(&error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
     g_warning("%s", error->message);
     g_clear_error(&error);
 
@@ -1499,7 +1495,7 @@ glong gexiv2_metadata_try_get_tag_long(G
 
     // Invalid "familyName"
     Exiv2::Error e(Exiv2::ErrorCode::kerInvalidKey, tag);
-    g_set_error_literal(error, g_quark_from_string("GExiv2"), e.code(), e.what());
+    g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
 
     return 0;
 }
@@ -1536,7 +1532,7 @@ gboolean gexiv2_metadata_try_set_tag_lon
 
     // Invalid "familyName"
     Exiv2::Error e(Exiv2::ErrorCode::kerInvalidKey, tag);
-    g_set_error_literal(error, g_quark_from_string("GExiv2"), e.code(), e.what());
+    g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
 
     return FALSE;
 }
@@ -1692,12 +1688,12 @@ gboolean gexiv2_metadata_get_exif_thumbn
 
     Exiv2::ExifThumb thumb = Exiv2::ExifThumb(self->priv->image->exifData());
     Exiv2::DataBuf data = thumb.copy();
-    if (data.pData_ == nullptr)
+    if (data.c_data() == nullptr)
         return FALSE;
     
-    *buffer = (guint8*) g_malloc(data.size_);
-    memcpy(*buffer, data.pData_, data.size_);
-    *size = data.size_;
+    *buffer = (guint8*) g_malloc(data.size());
+    memcpy(*buffer, data.c_data(), data.size());
+    *size = data.size();
 
     return TRUE;
 }
@@ -1713,7 +1709,7 @@ gboolean gexiv2_metadata_set_exif_thumbn
         
         return TRUE;
     } catch (Exiv2::Error &e) {
-        g_set_error_literal (error, g_quark_from_string ("GExiv2"), e.code (), e.what ());
+        g_set_error_literal (error, g_quark_from_string ("GExiv2"), static_cast<int>(e.code ()), e.what ());
     }
     
     return FALSE;
@@ -1745,7 +1741,7 @@ void gexiv2_metadata_try_set_exif_thumbn
         Exiv2::ExifThumb thumb = Exiv2::ExifThumb(self->priv->image->exifData());
         thumb.setJpegThumbnail(buffer, size);
     } catch (Exiv2::Error& e) {
-        g_set_error_literal(error, g_quark_from_string("GExiv2"), e.code(), e.what());
+        g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
     }
 }
 
@@ -1769,7 +1765,7 @@ void gexiv2_metadata_try_erase_exif_thum
         Exiv2::ExifThumb thumb = Exiv2::ExifThumb(self->priv->image->exifData());
         thumb.erase();
     } catch (Exiv2::Error& e) {
-        g_set_error_literal(error, g_quark_from_string("GExiv2"), e.code(), e.what());
+        g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
     }
 }
 
@@ -1788,7 +1784,7 @@ const gchar* gexiv2_metadata_try_get_tag
 
     // Invalid "familyName"
     Exiv2::Error e(Exiv2::ErrorCode::kerInvalidKey, tag);
-    g_set_error_literal(error, g_quark_from_string("GExiv2"), e.code(), e.what());
+    g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
 
     return nullptr;
 }
@@ -1824,7 +1820,7 @@ const gchar* gexiv2_metadata_try_get_tag
 
     // Invalid "familyName"
     Exiv2::Error e(Exiv2::ErrorCode::kerInvalidKey, tag);
-    g_set_error_literal(error, g_quark_from_string("GExiv2"), e.code(), e.what());
+    g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
 
     return nullptr;
 }
@@ -1860,7 +1856,7 @@ const gchar* gexiv2_metadata_try_get_tag
 
     // Invalid "familyName"
     Exiv2::Error e(Exiv2::ErrorCode::kerInvalidKey, tag);
-    g_set_error_literal(error, g_quark_from_string("GExiv2"), e.code(), e.what());
+    g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
 
     return nullptr;
 }
@@ -1899,7 +1895,7 @@ gboolean gexiv2_metadata_try_tag_support
 
     // Invalid tag (Family name)
     Exiv2::Error e(Exiv2::ErrorCode::kerInvalidKey, tag);
-    g_set_error_literal(error, g_quark_from_string("GExiv2"), e.code(), e.what());
+    g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
 
     return FALSE;
 }
@@ -1921,7 +1917,7 @@ GBytes* gexiv2_metadata_try_get_tag_raw(
 
     // Invalid "familyName"
     Exiv2::Error e(Exiv2::ErrorCode::kerInvalidKey, tag);
-    g_set_error_literal(error, g_quark_from_string("GExiv2"), e.code(), e.what());
+    g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
 
     return nullptr;
 }
diff -up gexiv2-0.14.1/gexiv2/gexiv2-metadata-exif.cpp.omv~ gexiv2-0.14.1/gexiv2/gexiv2-metadata-exif.cpp
--- gexiv2-0.14.1/gexiv2/gexiv2-metadata-exif.cpp.omv~	2023-05-18 03:45:32.964801898 +0200
+++ gexiv2-0.14.1/gexiv2/gexiv2-metadata-exif.cpp	2023-05-18 03:46:32.493403231 +0200
@@ -116,7 +116,7 @@ gchar* gexiv2_metadata_get_exif_tag_stri
         if (it != exif_data.end())
             return g_strdup (it->toString ().c_str ());
     } catch (Exiv2::Error& e) {
-        g_set_error_literal (error, g_quark_from_string ("GExiv2"), e.code (), e.what ());
+        g_set_error_literal (error, g_quark_from_string ("GExiv2"), static_cast<int>(e.code ()), e.what ());
     }
 
     return nullptr;
@@ -146,7 +146,7 @@ gchar** gexiv2_metadata_get_exif_tag_mul
             return array;
         }
     } catch (Exiv2::Error& e) {
-        g_set_error_literal(error, g_quark_from_string("GExiv2"), e.code(), e.what());
+        g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
     }
 
     array = g_new(gchar*, 1);
@@ -187,7 +187,7 @@ gboolean gexiv2_metadata_set_exif_tag_mu
         }
         return TRUE;
     } catch (Exiv2::Error& e) {
-        g_set_error_literal(error, g_quark_from_string("GExiv2"), e.code(), e.what());
+        g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
     }
 
     return FALSE;
@@ -214,7 +214,7 @@ gchar* gexiv2_metadata_get_exif_tag_inte
             return g_strdup (os.str ().c_str ());
         }
     } catch (Exiv2::Error& e) {
-        g_set_error_literal(error, g_quark_from_string("GExiv2"), e.code(), e.what());
+        g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
     }
 
     return nullptr;
@@ -232,7 +232,7 @@ gboolean gexiv2_metadata_set_exif_tag_st
         
         return TRUE;
     } catch (Exiv2::Error& e) {
-        g_set_error_literal (error, g_quark_from_string ("GExiv2"), e.code (), e.what ());
+        g_set_error_literal (error, g_quark_from_string ("GExiv2"), static_cast<int>(e.code ()), e.what ());
     }
     
     return FALSE;
@@ -253,9 +253,9 @@ glong gexiv2_metadata_get_exif_tag_long
             it++;
         
         if (it != exif_data.end())
-            return it->toLong ();
+            return it->toUint32 ();
     } catch (Exiv2::Error& e) {
-        g_set_error_literal(error, g_quark_from_string("GExiv2"), e.code(), e.what());
+        g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
     }
     
     return 0;
@@ -272,7 +272,7 @@ gboolean gexiv2_metadata_set_exif_tag_lo
         
         return TRUE;
     } catch (Exiv2::Error& e) {
-        g_set_error_literal(error, g_quark_from_string("GExiv2"), e.code(), e.what());
+        g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
     }
     
     return FALSE;
@@ -303,7 +303,7 @@ gboolean gexiv2_metadata_try_get_exif_ta
             return TRUE;
         }
     } catch (Exiv2::Error& e) {
-        g_set_error_literal(error, g_quark_from_string("GExiv2"), e.code(), e.what());
+        g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
     }
     
     return FALSE;
@@ -324,7 +324,7 @@ gboolean gexiv2_metadata_try_set_exif_ta
         
         return TRUE;
     } catch (Exiv2::Error& e) {
-        g_set_error_literal(error, g_quark_from_string("GExiv2"), e.code(), e.what());
+        g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
     }
     
     return FALSE;
@@ -413,7 +413,7 @@ const gchar* gexiv2_metadata_get_exif_ta
         Exiv2::ExifKey key(tag);
         return g_intern_string(key.tagLabel().c_str());
     } catch (Exiv2::Error& e) {
-        g_set_error_literal(error, g_quark_from_string("GExiv2"), e.code(), e.what());
+        g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
     }
     
     return NULL;
@@ -427,7 +427,7 @@ const gchar* gexiv2_metadata_get_exif_ta
         Exiv2::ExifKey key(tag);
         return g_intern_string(key.tagDesc().c_str());
     } catch (Exiv2::Error& e) {
-        g_set_error_literal(error, g_quark_from_string("GExiv2"), e.code(), e.what());
+        g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
     }
     
     return NULL;
@@ -441,7 +441,7 @@ const gchar* gexiv2_metadata_get_exif_ta
         Exiv2::ExifKey key(tag);
         return Exiv2::TypeInfo::typeName(key.defaultTypeId());
     } catch (Exiv2::Error& e) {
-        g_set_error_literal(error, g_quark_from_string("GExiv2"), e.code(), e.what());
+        g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
     }
     
     return NULL;
@@ -455,7 +455,7 @@ gboolean gexiv2_metadata_exif_tag_suppor
     	// Exif does not support multiple values, but still check if @tag is valid
         const Exiv2::ExifKey key(tag);
     } catch (Exiv2::Error& e) {
-        g_set_error_literal(error, g_quark_from_string("GExiv2"), e.code(), e.what());
+        g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
     }
 
     return FALSE;
@@ -484,7 +484,7 @@ GBytes* gexiv2_metadata_get_exif_tag_raw
             }
         }
     } catch (Exiv2::Error& e) {
-        g_set_error_literal(error, g_quark_from_string ("GExiv2"), e.code(), e.what());
+        g_set_error_literal(error, g_quark_from_string ("GExiv2"), static_cast<int>(e.code()), e.what());
     }
 
     return nullptr;
@@ -522,7 +522,7 @@ GBytes * gexiv2_metadata_get_exif_data (
 
         return g_bytes_new_take (data, blob.size());
     } catch (Exiv2::Error& e) {
-        g_set_error_literal(error, g_quark_from_string("GExiv2"), e.code(), e.what());
+        g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
     }
 
     return nullptr;
diff -up gexiv2-0.14.1/gexiv2/gexiv2-metadata-gps.cpp.omv~ gexiv2-0.14.1/gexiv2/gexiv2-metadata-gps.cpp
--- gexiv2-0.14.1/gexiv2/gexiv2-metadata-gps.cpp.omv~	2023-05-18 03:48:05.689339612 +0200
+++ gexiv2-0.14.1/gexiv2/gexiv2-metadata-gps.cpp	2023-05-18 03:48:14.209424940 +0200
@@ -90,7 +90,7 @@ gboolean gexiv2_metadata_try_get_gps_lon
 
         return TRUE;
     } catch (Exiv2::Error &e) {
-        g_set_error_literal(error, g_quark_from_string("GExiv2"), e.code(), e.what());
+        g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
     } catch (std::invalid_argument &e) {
         g_set_error_literal(error, g_quark_from_string("GExiv2"), 0, e.what());
     }
@@ -141,7 +141,7 @@ gboolean gexiv2_metadata_try_get_gps_lat
 
         return TRUE;
     } catch (Exiv2::Error &e) {
-        g_set_error_literal(error, g_quark_from_string("GExiv2"), e.code(), e.what());
+        g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
     } catch (std::invalid_argument &e) {
         g_set_error_literal(error, g_quark_from_string("GExiv2"), 0, e.what());
     }
@@ -181,7 +181,7 @@ gboolean gexiv2_metadata_try_get_gps_alt
 
         return TRUE;
     } catch (Exiv2::Error &e) {
-        g_set_error_literal(error, g_quark_from_string("GExiv2"), e.code(), e.what());
+        g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
     } catch (std::invalid_argument &e) {
         g_set_error_literal(error, g_quark_from_string("GExiv2"), 0, e.what());
     }
@@ -300,7 +300,7 @@ gboolean gexiv2_metadata_try_set_gps_inf
 
         return gexiv2_metadata_try_update_gps_info (self, longitude, latitude, altitude, error);
     } catch (Exiv2::Error &e) {
-        g_set_error_literal(error, g_quark_from_string("GExiv2"), e.code(), e.what());
+        g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
     }
 
     return FALSE;
@@ -393,7 +393,7 @@ gboolean gexiv2_metadata_try_update_gps_
         
         return TRUE;
     } catch (Exiv2::Error &e) {
-        g_set_error_literal(error, g_quark_from_string("GExiv2"), e.code(), e.what());
+        g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
     }
 
     return FALSE;
@@ -434,7 +434,7 @@ void gexiv2_metadata_try_delete_gps_info
                 ++exif_it;
         }
     } catch (Exiv2::Error& e) {
-        g_set_error_literal(error, g_quark_from_string("GExiv2"), e.code(), e.what());
+        g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
     }
     
     /* FIXME: two blocks shall ensure to erase in xmp data, if erasing in exif
@@ -454,7 +454,7 @@ void gexiv2_metadata_try_delete_gps_info
         
     } catch (Exiv2::Error& e) {
         if (error && *error == nullptr)
-            g_set_error_literal(error, g_quark_from_string("GExiv2"), e.code(), e.what());
+            g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
     }
 }
 
diff -up gexiv2-0.14.1/gexiv2/gexiv2-metadata-iptc.cpp.omv~ gexiv2-0.14.1/gexiv2/gexiv2-metadata-iptc.cpp
--- gexiv2-0.14.1/gexiv2/gexiv2-metadata-iptc.cpp.omv~	2023-05-18 03:43:53.378789294 +0200
+++ gexiv2-0.14.1/gexiv2/gexiv2-metadata-iptc.cpp	2023-05-18 03:45:56.584040816 +0200
@@ -140,7 +140,7 @@ gchar* gexiv2_metadata_get_iptc_tag_stri
             return g_strdup (os.str().c_str());
         }
     } catch (Exiv2::Error& e) {
-        g_set_error_literal (error, g_quark_from_string ("GExiv2"), e.code (), e.what ());
+        g_set_error_literal (error, g_quark_from_string ("GExiv2"), static_cast<int>(e.code ()), e.what ());
     }
     
     return nullptr;
@@ -186,7 +186,7 @@ gchar* gexiv2_metadata_get_iptc_tag_inte
             return g_strdup (os.str().c_str());
         }
     } catch (Exiv2::Error& e) {
-        g_set_error_literal (error, g_quark_from_string ("GExiv2"), e.code (), e.what ());
+        g_set_error_literal (error, g_quark_from_string ("GExiv2"), static_cast<int>(e.code ()), e.what ());
     }
     
     return nullptr;
@@ -234,7 +234,7 @@ gboolean gexiv2_metadata_set_iptc_tag_st
 
         return TRUE;
     } catch (Exiv2::Error& e) {
-        g_set_error_literal (error, g_quark_from_string ("GExiv2"), e.code (), e.what ());
+        g_set_error_literal (error, g_quark_from_string ("GExiv2"), static_cast<int>(e.code ()), e.what ());
     }
     
     return FALSE;
@@ -271,7 +271,7 @@ gchar** gexiv2_metadata_get_iptc_tag_mul
         
         return values;
     } catch (Exiv2::Error& e) {
-        g_set_error_literal (error, g_quark_from_string ("GExiv2"), e.code (), e.what ());
+        g_set_error_literal (error, g_quark_from_string ("GExiv2"), static_cast<int>(e.code ()), e.what ());
     }
     
     g_slist_free_full (list, g_free);
@@ -347,7 +347,7 @@ gboolean gexiv2_metadata_set_iptc_tag_mu
 
         return TRUE;
     } catch (Exiv2::Error& e) {
-        g_set_error_literal (error, g_quark_from_string ("GExiv2"), e.code (), e.what ());
+        g_set_error_literal (error, g_quark_from_string ("GExiv2"), static_cast<int>(e.code ()), e.what ());
     }
     
     return FALSE;
@@ -361,7 +361,7 @@ const gchar* gexiv2_metadata_get_iptc_ta
         Exiv2::IptcKey key (tag);
         return Exiv2::IptcDataSets::dataSetTitle (key.tag (), key.record ());
     } catch (Exiv2::Error& e) {
-        g_set_error_literal (error, g_quark_from_string ("GExiv2"), e.code (), e.what ());
+        g_set_error_literal (error, g_quark_from_string ("GExiv2"), static_cast<int>(e.code ()), e.what ());
     }
     
     return NULL;
@@ -375,7 +375,7 @@ const gchar* gexiv2_metadata_get_iptc_ta
         Exiv2::IptcKey key (tag);
         return Exiv2::IptcDataSets::dataSetDesc (key.tag (), key.record ());
     } catch (Exiv2::Error& e) {
-        g_set_error_literal (error, g_quark_from_string ("GExiv2"), e.code (), e.what ());
+        g_set_error_literal (error, g_quark_from_string ("GExiv2"), static_cast<int>(e.code ()), e.what ());
     }
     
     return NULL;
@@ -389,7 +389,7 @@ const gchar* gexiv2_metadata_get_iptc_ta
         Exiv2::IptcKey key (tag);
         return Exiv2::TypeInfo::typeName(Exiv2::IptcDataSets::dataSetType(key.tag(), key.record()));
     } catch (Exiv2::Error& e) {
-        g_set_error_literal (error, g_quark_from_string ("GExiv2"), e.code (), e.what ());
+        g_set_error_literal (error, g_quark_from_string ("GExiv2"), static_cast<int>(e.code ()), e.what ());
     }
     
     return NULL;
@@ -403,7 +403,7 @@ gboolean gexiv2_metadata_iptc_tag_suppor
         const Exiv2::IptcKey key(tag); // Check to see if @tag is valid
         return (Exiv2::IptcDataSets::dataSetRepeatable(key.tag(), key.record()) ? TRUE : FALSE);
     } catch (Exiv2::Error& e) {
-        g_set_error_literal(error, g_quark_from_string("GExiv2"), e.code(), e.what());
+        g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
     }
 
     return FALSE;
@@ -464,7 +464,7 @@ GBytes* gexiv2_metadata_get_iptc_tag_raw
             return g_byte_array_free_to_bytes(concatenated_raw_arrays);
         }
     } catch (Exiv2::Error& e) {
-        g_set_error_literal (error, g_quark_from_string ("GExiv2"), e.code (), e.what ());
+        g_set_error_literal (error, g_quark_from_string ("GExiv2"), static_cast<int>(e.code ()), e.what ());
     }
 
     return nullptr;
diff -up gexiv2-0.14.1/gexiv2/gexiv2-metadata-xmp.cpp.omv~ gexiv2-0.14.1/gexiv2/gexiv2-metadata-xmp.cpp
--- gexiv2-0.14.1/gexiv2/gexiv2-metadata-xmp.cpp.omv~	2023-05-18 03:57:37.827000759 +0200
+++ gexiv2-0.14.1/gexiv2/gexiv2-metadata-xmp.cpp	2023-05-18 03:59:59.247386271 +0200
@@ -48,7 +48,7 @@ gchar *gexiv2_metadata_try_generate_xmp_
             return g_strdup(packet.c_str());
         }
     } catch (Exiv2::Error& e) {
-        g_set_error_literal(error, g_quark_from_string("GExiv2"), e.code(), e.what());
+        g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
     }
 
     return nullptr;
@@ -79,7 +79,7 @@ gchar *gexiv2_metadata_try_get_xmp_packe
     try {
         return g_strdup(self->priv->image->xmpPacket().c_str());
     } catch (Exiv2::Error& e) {
-        g_set_error_literal(error, g_quark_from_string("GExiv2"), e.code(), e.what());
+        g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
     }
     
     return NULL;
@@ -187,7 +187,7 @@ gchar* gexiv2_metadata_get_xmp_tag_strin
         if (it != xmp_data.end())
             return g_strdup (it->toString ().c_str ());
     } catch (Exiv2::Error& e) {
-        g_set_error_literal(error, g_quark_from_string("GExiv2"), e.code(), e.what());
+        g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
     }
 
     return nullptr;
@@ -214,7 +214,7 @@ gchar* gexiv2_metadata_get_xmp_tag_inter
             return g_strdup (os.str ().c_str ());
         }
     } catch (Exiv2::Error& e) {
-        g_set_error_literal(error, g_quark_from_string("GExiv2"), e.code(), e.what());
+        g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
     }
 
     return nullptr;
@@ -257,7 +257,7 @@ gboolean gexiv2_metadata_try_set_xmp_tag
         xmp_data.add(Exiv2::XmpKey(tag), &tv);
         return TRUE;
     } catch (Exiv2::Error& e) {
-        g_set_error_literal(error, g_quark_from_string("GExiv2"), e.code(), e.what());
+        g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
     }
     
     return FALSE;
@@ -294,7 +294,7 @@ gboolean gexiv2_metadata_set_xmp_tag_str
         
         return TRUE;
     } catch (Exiv2::Error& e) {
-        g_set_error_literal(error, g_quark_from_string("GExiv2"), e.code(), e.what());
+        g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
     }
     
     return FALSE;
@@ -315,9 +315,9 @@ glong gexiv2_metadata_get_xmp_tag_long (
             it++;
         
         if (it != xmp_data.end())
-            return it->toLong ();
+            return it->toUint32 ();
     } catch (Exiv2::Error& e) {
-        g_set_error_literal(error, g_quark_from_string("GExiv2"), e.code(), e.what());
+        g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
     }
     
     return 0;
@@ -334,7 +334,7 @@ gboolean gexiv2_metadata_set_xmp_tag_lon
         
         return TRUE;
     } catch (Exiv2::Error& e) {
-        g_set_error_literal(error, g_quark_from_string("GExiv2"), e.code(), e.what());
+        g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
     }
     
     return FALSE;
@@ -414,7 +414,7 @@ gchar** gexiv2_metadata_get_xmp_tag_mult
         if (array) {
             g_strfreev(array);
         }
-        g_set_error_literal(error, g_quark_from_string("GExiv2"), e.code(), e.what());
+        g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
     }
 
     array = g_new(gchar*, 1);
@@ -450,7 +450,7 @@ gchar** gexiv2_metadata_get_xmp_tag_mult
             return array;
         }
     } catch (Exiv2::Error& e) {
-        g_set_error_literal(error, g_quark_from_string("GExiv2"), e.code(), e.what());
+        g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
     }
 
     gchar **array = g_new (gchar*, 1);
@@ -488,7 +488,7 @@ gboolean gexiv2_metadata_set_xmp_tag_mul
 
         return TRUE;
     } catch (Exiv2::Error& e) {
-        g_set_error_literal(error, g_quark_from_string("GExiv2"), e.code(), e.what());
+        g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
     }
     
     return FALSE;
@@ -501,7 +501,7 @@ const gchar* gexiv2_metadata_get_xmp_tag
     try {
         return Exiv2::XmpProperties::propertyTitle(Exiv2::XmpKey(tag));
     } catch (Exiv2::Error& e) {
-        g_set_error_literal(error, g_quark_from_string("GExiv2"), e.code(), e.what());
+        g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
     }
     
     return NULL;
@@ -514,7 +514,7 @@ const gchar* gexiv2_metadata_get_xmp_tag
     try {
         return Exiv2::XmpProperties::propertyDesc(Exiv2::XmpKey(tag));
     } catch (Exiv2::Error& e) {
-        g_set_error_literal(error, g_quark_from_string("GExiv2"), e.code(), e.what());
+        g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
     }
     
     return NULL;
@@ -527,7 +527,7 @@ const gchar* gexiv2_metadata_get_xmp_tag
     try {
         return Exiv2::TypeInfo::typeName(Exiv2::XmpProperties::propertyType(Exiv2::XmpKey(tag)));
     } catch (Exiv2::Error& e) {
-        g_set_error_literal(error, g_quark_from_string("GExiv2"), e.code(), e.what());
+        g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
     }
     
     return NULL;
@@ -569,7 +569,7 @@ gboolean gexiv2_metadata_xmp_tag_support
             return TRUE;
         }
     } catch (Exiv2::Error& e) {
-        g_set_error_literal(error, g_quark_from_string("GExiv2"), e.code(), e.what());
+        g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
     }
     return FALSE;
 }
@@ -597,7 +597,7 @@ GBytes* gexiv2_metadata_get_xmp_tag_raw
             }
         }
     } catch (Exiv2::Error& e) {
-        g_set_error_literal(error, g_quark_from_string("GExiv2"), e.code(), e.what());
+        g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
     }
 
     return nullptr;
@@ -624,13 +624,13 @@ gboolean gexiv2_metadata_try_register_xm
 
     try {
         Exiv2::XmpProperties::ns(prefix);
-    } catch (Exiv2::AnyError& e1) {
+    } catch (Exiv2::Error& e1) {
         // No namespace, OK to register
         try {
             Exiv2::XmpProperties::registerNs(name, prefix);
             return TRUE;
-        } catch (Exiv2::AnyError& e2) {
-            g_set_error_literal(error, g_quark_from_string("GExiv2"), e2.code(), e2.what());
+        } catch (Exiv2::Error& e2) {
+            g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e2.code()), e2.what());
         }
     }
 
@@ -670,7 +670,7 @@ gboolean gexiv2_metadata_try_unregister_
             }
         }
     } catch (Exiv2::Error& e2) {
-        g_set_error_literal(error, g_quark_from_string("GExiv2"), e2.code(), e2.what());
+        g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e2.code()), e2.what());
     }
     return FALSE;
 }
@@ -692,7 +692,7 @@ void gexiv2_metadata_try_unregister_all_
     try {
         Exiv2::XmpProperties::unregisterNs();
     } catch (Exiv2::Error& e) {
-        g_set_error_literal(error, g_quark_from_string("GExiv2"), e.code(), e.what());
+        g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
     }
 }
 
@@ -739,7 +739,7 @@ char* gexiv2_metadata_try_get_xmp_namesp
 
         result = g_strdup(info.c_str());
     } catch (Exiv2::Error& e) {
-        g_set_error_literal(error, g_quark_from_string("GExiv2"), e.code(), e.what());
+        g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
     }
 
     g_clear_pointer(&list, g_strfreev);
diff -up gexiv2-0.14.1/gexiv2/gexiv2-preview-image.cpp.omv~ gexiv2-0.14.1/gexiv2/gexiv2-preview-image.cpp
--- gexiv2-0.14.1/gexiv2/gexiv2-preview-image.cpp.omv~	2023-05-18 03:48:25.122534172 +0200
+++ gexiv2-0.14.1/gexiv2/gexiv2-preview-image.cpp	2023-05-18 03:48:31.721600190 +0200
@@ -66,7 +66,7 @@ GExiv2PreviewImage* gexiv2_preview_image
 
         g_object_unref(self);
 
-        g_set_error_literal(error, g_quark_from_string("GExiv2"), e.code(), e.what());
+        g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
     }
     return nullptr;
 }
@@ -141,7 +141,7 @@ glong gexiv2_preview_image_try_write_fil
     try {
         return self->priv->image->writeFile(path);
     } catch (Exiv2::Error& e) {
-        g_set_error_literal(error, g_quark_from_string("GExiv2"), e.code(), e.what());
+        g_set_error_literal(error, g_quark_from_string("GExiv2"), static_cast<int>(e.code()), e.what());
     }
     return -1;
 }
diff -up gexiv2-0.14.1/gexiv2/gexiv2-stream-io.cpp.omv~ gexiv2-0.14.1/gexiv2/gexiv2-stream-io.cpp
--- gexiv2-0.14.1/gexiv2/gexiv2-stream-io.cpp.omv~	2023-05-18 03:46:44.053519700 +0200
+++ gexiv2-0.14.1/gexiv2/gexiv2-stream-io.cpp	2023-05-18 04:03:42.772570331 +0200
@@ -63,11 +63,11 @@ StreamIo::ptr_type StreamIo::temporary (
     return ptr_type{new Exiv2::MemIo ()};
 }
 
-StreamIo::size_type StreamIo::write (const Exiv2::byte* data, StreamIo::size_type write_count) {
+size_t StreamIo::write (const Exiv2::byte* data, size_t write_count) {
     if ( ! can_write)
         return 0;
     
-    StreamIo::size_type total_written_bytes = 0;
+    size_t total_written_bytes = 0;
     
     while (write_count > total_written_bytes) {
     
@@ -83,7 +83,7 @@ StreamIo::size_type StreamIo::write (con
     return total_written_bytes;
 }
 
-StreamIo::size_type StreamIo::write (Exiv2::BasicIo& src) {
+size_t StreamIo::write (Exiv2::BasicIo& src) {
     if ( ! can_write)
         return 0;
     
@@ -138,7 +138,7 @@ int StreamIo::seek (long offset, Positio
     return 0;
 }
 
-long StreamIo::tell () const {
+size_t StreamIo::tell () const {
     return cb->Position (cb->handle);
 }
 
@@ -163,18 +163,18 @@ int StreamIo::close () {
     return 0;
 }
 
-Exiv2::DataBuf StreamIo::read (size_type read_count) {
+Exiv2::DataBuf StreamIo::read (size_t read_count) {
     Exiv2::DataBuf buffer (read_count);
     
-    long read_bytes = read (buffer.pData_, buffer.size_);
+    long read_bytes = read (buffer.data(), buffer.size());
 
-    buffer.size_ = read_bytes;
+    buffer.resize(read_bytes);
     
     return buffer;
 }
 
-StreamIo::size_type StreamIo::read (Exiv2::byte* buf, StreamIo::size_type read_count) {
-    StreamIo::size_type total_read_bytes = 0;
+size_t StreamIo::read (Exiv2::byte* buf, size_t read_count) {
+    size_t total_read_bytes = 0;
 
     while (read_count > total_read_bytes) {
         /* because of a marshalling problem on managed side, we shift the
@@ -209,7 +209,7 @@ bool StreamIo::eof () const {
     return (cb->Length (cb->handle) == cb->Position (cb->handle));
 }
 
-std::string StreamIo::path () const {
+const std::string &StreamIo::path () const noexcept {
     return "managed stream";
 }
 
diff -up gexiv2-0.14.1/gexiv2/gexiv2-stream-io.h.omv~ gexiv2-0.14.1/gexiv2/gexiv2-stream-io.h
--- gexiv2-0.14.1/gexiv2/gexiv2-stream-io.h.omv~	2023-05-18 03:49:43.531317037 +0200
+++ gexiv2-0.14.1/gexiv2/gexiv2-stream-io.h	2023-05-18 04:02:56.398117683 +0200
@@ -24,10 +24,8 @@ class StreamIo : public Exiv2::BasicIo {
 public:
 #if EXIV2_TEST_VERSION(0,27,99)
     using ptr_type = Exiv2::BasicIo::UniquePtr;
-    using size_type = long;
 #else
     using ptr_type = Exiv2::BasicIo::AutoPtr;
-    using size_type = long;
 #endif
 
 	StreamIo (ManagedStreamCallbacks* cb);
@@ -35,26 +33,27 @@ public:
 	~StreamIo ();
 	int open () override;
 	int close () override;
-	size_type write (const Exiv2::byte* data, size_type wcount) override;
-	size_type write (Exiv2::BasicIo& src) override;
+	size_t write (const Exiv2::byte* data, size_t wcount) override;
+	size_t write (Exiv2::BasicIo& src) override;
 	int putb (Exiv2::byte data) override;
-    Exiv2::DataBuf read (size_type rcount) override;
-    size_type read (Exiv2::byte* buf, size_type rcount) override;
+    Exiv2::DataBuf read (size_t rcount) override;
+    size_t read (Exiv2::byte* buf, size_t rcount) override;
 	int getb () override;
 	void transfer (Exiv2::BasicIo& src) override;
 	int seek (long offset, Position pos) override;
 	Exiv2::byte* mmap (bool isWriteable = false) override;
 	int munmap () override;
-	long tell () const override;
+	size_t tell () const override;
 	size_t size () const override;
 	bool isopen () const override;
 	int error () const override;
 	bool eof () const override;
-	std::string path () const override;
+	const std::string &path () const noexcept override;
 #ifdef EXV_UNICODE_PATH
 	std::wstring wpath () const override;
 #endif
 	ptr_type temporary () const;
+	void populateFakeData() override {}
 
 private:
 	/* stream callbacks */
